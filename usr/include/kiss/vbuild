#! /bin/sh -e
# Void linux xbps build functions

XBPS_BUILDDIR="$PWD"
DESTDIR="$1"
PKGDESTDIR="$1"
XBPS_CROSS_BASE="$1"
# Setup some specific package vars.
# wrksrc="$XBPS_BUILDDIR/${sourcepkg}-${version}"
wrksrc="$XBPS_BUILDDIR"

msg_red() {
    # error messages in bold/red
    [ -n "$NOCOLORS" ] || printf >&2 "\033[1m\033[31m"
    printf >&2 "=> ERROR: $@"
    [ -n "$NOCOLORS" ] || printf >&2 "\033[m"
}

# Helper function for calling sed on files and checking if the
# file is actually changed
#
# NOTE: this will not check if the input is valid, you can problably
# make it execute arbirtrary commands via passing '; cmd' to a vsed
# call.

vsed() {
	local files= regexes= OPTIND OPTSTRING="ie:" has_inline=

	eval set -- "$(getopt -s bash "$OPTSTRING" "$@")";

	while getopts "$OPTSTRING" opt; do
		case $opt in
			i) has_inline=1 ;;
			e) regexes+=("$OPTARG") ;;
			*) ;;
		esac
	done

	if ! [ "$has_inline" ]; then
		msg_red "$pkgver: vsed: you must specify -i.\n"
		return 1
	fi

	shift $(($OPTIND - 1))

	if [ ${#regexes[@]} -eq 0 ] && [ $# -ge 2 ]; then
		regexes+=("$1")
		shift
	fi

	if [ ${#regexes[@]} -eq 0 ]; then
		msg_red "$pkgver: vsed: no regexes specified.\n"
		return 1
	fi

	for i; do
		files+=("$i")
	done

	if [ ${#files[@]} -eq 0 ]; then
		msg_red "$pkgver: vsed: no files specified.\n"
		return 1
	fi

	for f in "${files[@]}"; do
		olddigest="$($XBPS_DIGEST_CMD "$f")"
		olddigest="${olddigest%% *}"

		for rx in "${regexes[@]}"; do
			sed -i "$f" -e "$rx" || {
				msg_red "$pkgver: vsed: sed call failed with regex \"$rx\" on file \"$f\"\n"
				return 1
			}

			newdigest="$($XBPS_DIGEST_CMD "$f")"
			newdigest="${newdigest%% *}"

			msgfunc=msg_warn
			if [ -n "$XBPS_STRICT" ]; then
				msgfunc=msg_error
			fi

			if [ "$olddigest" = "$newdigest" ]; then
				$msgfunc "$pkgver: vsed: regex \"$rx\" didn't change file \"$f\"\n"
			fi
			olddigest="${newdigest}"
		done
	done
}

vinstall() {
	local file="$1" mode="$2" targetdir="$3" targetfile="$4"

	if [ -z "$PKGDESTDIR" ]; then
		msg_red "$pkgver: vinstall: PKGDESTDIR unset, can't continue...\n"
		return 1
	fi

	if [ $# -lt 3 ]; then
		msg_red "$pkgver: vinstall: 3 arguments expected: <file> <mode> <target-directory>\n"
		return 1
	fi

	if [ ! -r "${file}" ]; then
		msg_red "$pkgver: vinstall: cannot find '$file'...\n"
		return 1
	fi

	if [ -z "$targetfile" ]; then
		install -Dm${mode} "${file}" "${PKGDESTDIR}/${targetdir}/${file##*/}"
	else
		install -Dm${mode} "${file}" "${PKGDESTDIR}/${targetdir}/${targetfile##*/}"
	fi
}

vmove() {
	local f files="$1" _targetdir

	if [ -z "$DESTDIR" ]; then
		msg_red "$pkgver: vmove: DESTDIR unset, can't continue...\n"
		return 1
	elif [ -z "$PKGDESTDIR" ]; then
		msg_red "$pkgver: vmove: PKGDESTDIR unset, can't continue...\n"
		return 1
	elif [ "$DESTDIR" = "$PKGDESTDIR" ]; then
		msg_red "$pkgver: vmove is intended to be used in pkg_install\n"
		return 1
	fi
	if [ $# -ne 1 ]; then
		msg_red "$pkgver: vmove: 1 argument expected: <files>\n"
		return 1
	fi
	for f in ${files}; do
		_targetdir=${f%/*}/
		break
	done

	if [ -z "${_targetdir}" ]; then
		[ ! -d ${PKGDESTDIR} ] && install -d ${PKGDESTDIR}
		mv ${DESTDIR}/$files ${PKGDESTDIR}
	else
		if [ ! -d ${PKGDESTDIR}/${_targetdir} ]; then
			install -d ${PKGDESTDIR}/${_targetdir}
		fi
		mv ${DESTDIR}/$files ${PKGDESTDIR}/${_targetdir}
	fi
}

